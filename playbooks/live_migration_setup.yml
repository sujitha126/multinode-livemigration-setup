#Copyright 2014 Cisco Systems, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#
# @author: Juergen Brendel, Cisco Systems, Inc.

# -----------------------------------------------------------------------------
# This playbook performs the necessary setup steps on an OpenStack guest in
# order setup live migration configuration. It's assumed that all the guests have already
# been installed with devstack and controller and compute are up and running.
# -----------------------------------------------------------------------------

---

#
# Configuration changes for NoLiveMigrationForConfigDriveInLibVirt error
#
- hosts: cluster
  sudo: yes
  sudo_user: "{{ USERS.stack_user }}"
  tasks:
  - lineinfile: dest="{{ FILES.nova_conf_file}}"
                state=present
                regexp='force_config_drive'
                line='force_config_drive=False'
                backup=yes

#
# Configuration changes for CPU incompatibility
# Changing cpu_mode to custom
# Changing cpu_model to gate64 works on Rackspace public cloud
# Select any cpu_model that has common features from both source and destionation host
#
- hosts: cluster
  sudo: yes
  sudo_user: "{{ USERS.stack_user }}"
  tasks:
  - lineinfile: dest="{{ FILES.nova_conf_file}}"
                state=present
                regexp='cpu_mode ='
                line='cpu_mode = custom'
                backup=yes 
  - lineinfile: dest="{{ FILES.nova_conf_file}}"
               state=present
               insertafter='cpu_mode ='
               line='cpu_model = gate64'
               backup=yes

# Change ssh config to bypass host key checking

- hosts: cluster
  tasks:
  - lineinfile: dest="{{ FILES.ssh_config_file}}"
                state=present
                regexp='StrictHostKeyChecking'
                line='   StrictHostKeyChecking no'
                backup=yes
  - lineinfile: dest="{{ FILES.ssh_config_file}}"
               state=present
               insertafter='StrictHostKeyChecking'
               line='   UserKnownHostsFile=/dev/null'
               backup=yes

#
# ssh key pair exchange to enable password less ssh access
# between different comupte nodes.
#
- hosts: cluster
  name: Copy cpu_map.xml file to the target
  tasks:
  - copy: >
      src="{{ FILES.local_files_dir }}/cpu_map.xml"
      dest="{{FILES.libvirt_cpu_dir}}/cpu_map.xml"
  - shell: >
      service libvirt-bin restart


# Generate ssh-keypair for root user

- hosts: cluster
  tasks:
  - user: name=root
          generate_ssh_key=yes
          ssh_key_file=.ssh/id_rsa
  - name: Copy public key to variable
    command: cat .ssh/id_rsa.pub
    register: tmp_file
  - set_fact:
      public_key_root='{{tmp_file.stdout}}'
       

# Generate ssh-keypair for stack user

- hosts: cluster
  tasks:
  - user: name={{ USERS.stack_user }}
          generate_ssh_key=yes
          ssh_key_file=.ssh/id_rsa
  - name: Copy public key to variable
    command: cat {{ FILES.stack_user_home_dir }}/.ssh/id_rsa.pub
    register: tmp_file
  - set_fact:
      public_key_stack='{{tmp_file.stdout}}'



# Copy publick key of one compute node to authorized keys
# of every other compute node

- hosts: localhost
  connection: local
  tasks:
  -  shell: echo {{ hostvars[item[0]]['public_key_root']}} | ssh root@{{hostvars[item[1]][NET.pub_eth_interface]['ipv4']['address']}} 'cat >> .ssh/authorized_keys';
            echo {{ hostvars[item[0]]['public_key_stack']}}
           | ssh root@{{hostvars[item[1]][NET.pub_eth_interface]['ipv4']['address']}} 'cat >>{{FILES.stack_user_home_dir}}/.ssh/authorized_keys'  
     with_nested: 
       - groups['cluster']
       - groups['cluster']

# Allow other users to ssh without password

- hosts: localhost
  connection: local
  tasks:
  -  shell: echo {{ hostvars[item[0]]['public_key_root']}} 
            | ssh root@{{hostvars[item[1]][NET.pub_eth_interface]['ipv4']['address']}} 'cat >> {{FILES.stack_user_home_dir}}/.ssh/authorized_keys';
            echo {{ hostvars[item[0]]['public_key_stack']}}
           | ssh root@{{hostvars[item[1]][NET.pub_eth_interface]['ipv4']['address']}} 'cat >> .ssh/authorized_keys'
     with_nested:
       - groups['cluster']
       - groups['cluster']

# Add cluster nodes to /etc/hosts

- hosts: cluster
  tasks:
    - lineinfile: dest=/etc/hosts
                  state=present
                  line="{{ hostvars[item]['ansible_eth1']['ipv4']['address'] }}   {{hostvars[item]['ansible_fqdn']}}"
                  insertafter=EOF
                  backup=yes
      with_items: groups['cluster']
      when: item != inventory_hostname

